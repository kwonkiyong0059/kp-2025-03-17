name: deploy
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'Dockerfile'
    branches:
      - main
jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Tag Name
        id: create_tag
        run: echo "TAG_NAME=$(git describe --tags --abbrev=0 || echo 'v1.0.0')" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body: "자동 생성된 릴리즈"
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: app20250314
    steps:
      - uses: actions/checkout@v4
      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }},
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: "i-0553abb2ebd4458b4"
          working-directory: /
          comment: Deploy
          command: |
            # 최신 Docker 이미지 Pull
            docker pull ghcr.io/${{ env.OWNER_LC }}/app20250314:latest
            docker stop app1 2>/dev/null
            docker rm app1 2>/dev/null

            # GitHub Secrets에서 application-secret.yml을 EC2에 저장
            echo "${{ secrets.APPLICATION_SECRET_YML }}" | sudo tee /home/ubuntu/application-secret.yml > /dev/null

            # Docker 실행 시 application-secret.yml을 마운트
            docker run -d --name app1 \
              -p 8080:8080 \
              -v /home/ubuntu/application-secret.yml:/app/config/application-secret.yml \
              -e SPRING_CONFIG_LOCATION=file:/app/config/application-secret.yml \
              ghcr.io/${{ env.OWNER_LC }}/app20250314:latest

            # 불필요한 dangling 이미지 삭제
            docker images -f "dangling=true" -q | xargs --no-run-if-empty docker rmi
